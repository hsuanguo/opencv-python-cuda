# Version: 20230628
# Image name: quay.io/opencv-ci/opencv-python-manylinux2014-x86-64

FROM quay.io/pypa/manylinux2014_x86_64:latest

# Arguments for the build, those below are the default values and will be overridden by docker build script

# --------------------------------------------------------------------------------

# CUDNN and video codec SDK are not available for direct download, you need to download them manually and put them in downloads folder
# CUDNN: https://developer.nvidia.com/rdp/cudnn-archive
# Video Codec SDK: https://developer.nvidia.com/nvidia-video-codec-sdk/download

ARG UID=1002
ARG CUDA_TOOLKIT_URL=https://developer.download.nvidia.com/compute/cuda/11.7.1/local_installers/cuda_11.7.1_515.65.01_linux.run
ARG CUDA_TOOLKIT_RUN_FILE=cuda_11.7.1_515.65.01_linux.run
ARG CUDA_VERSION=11.7
ARG DOWNLOADED_PKG_DIR=./downloads
ARG CUDNN_TAR_FILE=cudnn-linux-x86_64-8.6.0.163_cuda11-archive.tar.xz
ARG VIDEO_CODEC_SDK_FILE=Video_Codec_SDK_12.1.14.zip

# --------------------------------------------------------------------------------

ARG CCACHE_VERSION=3.7.9
ARG FFMPEG_VERSION=5.1.3
ARG FREETYPE_VERSION=2.13.1
ARG LIBPNG_VERSION=1.6.40
ARG NASM_VERSION=2.15.04
ARG OPENSSL_VERSION=1_1_1u
ARG QT_VERSION=5.15.0
ARG YASM_VERSION=1.3.0

ENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH

# epel-release need for aarch64 to get openblas packages
RUN yum install wget zlib-devel curl-devel xcb-util-renderutil-devel xcb-util-devel xcb-util-image-devel xcb-util-keysyms-devel xcb-util-wm-devel mesa-libGL-devel libxkbcommon-devel libxkbcommon-x11-devel libXi-devel lapack-devel epel-release -y && \
    yum install openblas-devel dejavu-sans-fonts -y && \
    cp /usr/include/lapacke/lapacke*.h /usr/include/ && \
    curl https://raw.githubusercontent.com/xianyi/OpenBLAS/v0.3.3/cblas.h -o /usr/include/cblas.h && \
    # libpng will be built from source
    yum remove libpng -y

RUN mkdir ~/libpng_sources && \
    cd ~/libpng_sources && \
    curl -O -L https://download.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz && \
    tar -xf libpng-${LIBPNG_VERSION}.tar.gz && \
    cd libpng-${LIBPNG_VERSION} && \
    ./configure --prefix=/usr/local && \
    make && \
    make install && \
    cd .. && \
    rm -rf ~/libpng_sources

RUN mkdir ~/freetype_sources && \
    cd ~/freetype_sources && \
    curl -O -L https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.gz && \
    tar -xf freetype-${FREETYPE_VERSION}.tar.gz && \
    cd freetype-${FREETYPE_VERSION} && \
    ./configure --prefix="/ffmpeg_build" --enable-freetype-config && \
    make && \
    make install && \
    cd .. && \
    rm -rf ~/freetype_sources

RUN curl -O -L https://download.qt.io/official_releases/qt/5.15/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz && \
    cd qt-everywhere-src-${QT_VERSION} && \
    export MAKEFLAGS=-j$(nproc) && \
    ./configure -prefix /opt/Qt${QT_VERSION} -release -opensource -confirm-license -qtnamespace QtOpenCVPython -xcb -xcb-xlib -bundled-xcb-xinput -no-openssl -no-dbus -skip qt3d -skip qtactiveqt -skip qtcanvas3d -skip qtconnectivity -skip qtdatavis3d -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmultimedia -skip qtpurchasing -skip qtqa -skip qtremoteobjects -skip qtrepotools -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qttranslations -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip xmlpatterns -skip declarative -make libs && \
    make && \
    make install && \
    cd .. && \
    rm -rf qt-everywhere*

ENV QTDIR /opt/Qt${QT_VERSION}
ENV PATH "$QTDIR/bin:$PATH"

RUN mkdir ~/openssl_sources && \
    cd ~/openssl_sources && \
    curl -O -L https://github.com/openssl/openssl/archive/OpenSSL_${OPENSSL_VERSION}.tar.gz && \
    tar -xf OpenSSL_${OPENSSL_VERSION}.tar.gz && \
    cd openssl-OpenSSL_${OPENSSL_VERSION} && \
    ./config --prefix="/ffmpeg_build" --openssldir="/ffmpeg_build" no-pinshared shared zlib && \
    make -j$(getconf _NPROCESSORS_ONLN) && \
    # skip installing documentation
    make install_sw && \
    cd .. && \
    rm -rf ~/openssl_build ~/openssl_sources

RUN mkdir ~/nasm_sources && \
    cd ~/nasm_sources && \
    curl -O -L http://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/nasm-${NASM_VERSION}.tar.gz && \
    tar -xf nasm-${NASM_VERSION}.tar.gz && cd nasm-${NASM_VERSION} && ./autogen.sh && \
    ./configure --prefix="/ffmpeg_build" --bindir="$HOME/bin" && \
    make -j$(getconf _NPROCESSORS_ONLN) && \
    make install && \
    cd .. && \
    rm -rf ~/nasm_sources

RUN mkdir ~/yasm_sources && \
    cd ~/yasm_sources && \
    curl -O -L http://www.tortall.net/projects/yasm/releases/yasm-${YASM_VERSION}.tar.gz && \
    tar -xf yasm-${YASM_VERSION}.tar.gz && \
    cd yasm-${YASM_VERSION} && \
    ./configure --prefix="/ffmpeg_build" --bindir="$HOME/bin" && \
    make -j$(getconf _NPROCESSORS_ONLN) && \
    make install && \
    cd .. && \
    rm -rf ~/yasm_sources

RUN mkdir ~/libvpx_sources && \
    cd ~/libvpx_sources && \
    git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git && \
    cd libvpx && \
    ./configure --prefix="/ffmpeg_build" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm --enable-pic --enable-shared && \
    make -j$(getconf _NPROCESSORS_ONLN) && \
    make install && \
    cd .. && \
    rm -rf ~/libvpx_sources

RUN mkdir ~/ffmpeg_sources && \
    cd ~/ffmpeg_sources && \
    curl -O -L https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz && \
    tar -xf ffmpeg-${FFMPEG_VERSION}.tar.gz && \
    cd ffmpeg-${FFMPEG_VERSION} && \
    PATH=~/bin:$PATH && \
    PKG_CONFIG_PATH="/ffmpeg_build/lib/pkgconfig" ./configure --prefix="/ffmpeg_build" --extra-cflags="-I/ffmpeg_build/include" --extra-ldflags="-L/ffmpeg_build/lib" --enable-openssl --enable-libvpx --enable-shared --enable-pic --bindir="$HOME/bin" && \
    make -j$(getconf _NPROCESSORS_ONLN) && \
    make install && \
    echo "/ffmpeg_build/lib/" >> /etc/ld.so.conf && \
    ldconfig && \
    rm -rf ~/ffmpeg_sources

RUN curl -O -L https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}.tar.gz && \
    tar -xf ccache-${CCACHE_VERSION}.tar.gz && \
    cd ccache-${CCACHE_VERSION} && \
    ./configure && \
    make -j$(getconf _NPROCESSORS_ONLN) && \
    make install && \
    cd .. && \
    rm -rf ccache-${CCACHE_VERSION}.tar.gz

# Install CUDA
RUN wget ${CUDA_TOOLKIT_URL} && \
    sh ${CUDA_TOOLKIT_RUN_FILE} --silent --toolkit --toolkitpath=/usr/local/cuda-${CUDA_VERSION} && \
    rm -rf ${CUDA_TOOLKIT_RUN_FILE}

# Install CUDNN
COPY ${DOWNLOADED_PKG_DIR}/${CUDNN_TAR_FILE} ./
RUN tar -xf ${CUDNN_TAR_FILE} && \
    cp cudnn-*-archive/include/cudnn*.h /usr/local/cuda/include && \
    cp -P cudnn-*-archive/lib/libcudnn* /usr/local/cuda/lib64 && \
    chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn* && \
    rm -rf cudnn-*-archive.tar.xz cudnn-*-archive

# install NVIDIA VIDEO CODEC SDK
COPY ${DOWNLOADED_PKG_DIR}/${VIDEO_CODEC_SDK_FILE} ./
RUN unzip ${VIDEO_CODEC_SDK_FILE} && \
    cp Video_Codec_SDK_*/Lib/linux/stubs/x86_64/* /usr/local/cuda/lib64/ && \
    cp Video_Codec_SDK_*/Interface/* /usr/local/cuda/include/ && \
    cd .. && \
    rm -rf Video_Codec_SDK_*

# use your user id
RUN useradd ci -m -s /bin/bash -G users --uid=${UID} && \
    mkdir /io && \
    chown -R ci:ci /io && \
    # This needs to find ffmpeg packages from ci user
    chown -R ci:ci /ffmpeg_build && \
    # This calls in mutlibuild scripts and cannot be run without permissions
    chown -R ci:ci /opt/_internal/pipx/venvs/auditwheel

USER ci

# Git security vulnerability: https://github.blog/2022-04-12-git-security-vulnerability-announced
RUN git config --global --add safe.directory /io

ENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig:/ffmpeg_build/lib/pkgconfig
ENV LDFLAGS -L/ffmpeg_build/lib
ENV PATH "$HOME/bin:$PATH"
